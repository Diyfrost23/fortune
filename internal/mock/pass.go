// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pass "github.com/shlima/fortune/internal/pkg/pass"
)

// MockPassgen is a mock of IGen interface.
type MockPassgen struct {
	ctrl     *gomock.Controller
	recorder *MockPassgenMockRecorder
}

// MockPassgenMockRecorder is the mock recorder for MockPassgen.
type MockPassgenMockRecorder struct {
	mock *MockPassgen
}

// NewMockPassgen creates a new mock instance.
func NewMockPassgen(ctrl *gomock.Controller) *MockPassgen {
	mock := &MockPassgen{ctrl: ctrl}
	mock.recorder = &MockPassgenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPassgen) EXPECT() *MockPassgenMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockPassgen) All() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All")
	ret0, _ := ret[0].([]string)
	return ret0
}

// All indicates an expected call of All.
func (mr *MockPassgenMockRecorder) All() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockPassgen)(nil).All))
}

// Heartbeat mocks base method.
func (m *MockPassgen) Heartbeat() *pass.HeartBit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Heartbeat")
	ret0, _ := ret[0].(*pass.HeartBit)
	return ret0
}

// Heartbeat indicates an expected call of Heartbeat.
func (mr *MockPassgenMockRecorder) Heartbeat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Heartbeat", reflect.TypeOf((*MockPassgen)(nil).Heartbeat))
}

// Next mocks base method.
func (m *MockPassgen) Next() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Next indicates an expected call of Next.
func (mr *MockPassgenMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPassgen)(nil).Next))
}

// Opts mocks base method.
func (m *MockPassgen) Opts() pass.GenOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Opts")
	ret0, _ := ret[0].(pass.GenOpts)
	return ret0
}

// Opts indicates an expected call of Opts.
func (mr *MockPassgenMockRecorder) Opts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Opts", reflect.TypeOf((*MockPassgen)(nil).Opts))
}

// Permutations mocks base method.
func (m *MockPassgen) Permutations() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Permutations")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// Permutations indicates an expected call of Permutations.
func (mr *MockPassgenMockRecorder) Permutations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Permutations", reflect.TypeOf((*MockPassgen)(nil).Permutations))
}
