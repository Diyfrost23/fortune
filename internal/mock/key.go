// Code generated by MockGen. DO NOT EDIT.
// Source: types.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	key "github.com/shlima/fortune/internal/pkg/key"
)

// MockKeygenerator is a mock of IGenerator interface.
type MockKeygenerator struct {
	ctrl     *gomock.Controller
	recorder *MockKeygeneratorMockRecorder
}

// MockKeygeneratorMockRecorder is the mock recorder for MockKeygenerator.
type MockKeygeneratorMockRecorder struct {
	mock *MockKeygenerator
}

// NewMockKeygenerator creates a new mock instance.
func NewMockKeygenerator(ctrl *gomock.Controller) *MockKeygenerator {
	mock := &MockKeygenerator{ctrl: ctrl}
	mock.recorder = &MockKeygeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeygenerator) EXPECT() *MockKeygeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockKeygenerator) Generate() (key.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(key.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockKeygeneratorMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockKeygenerator)(nil).Generate))
}

// SetTesting mocks base method.
func (m *MockKeygenerator) SetTesting(address string) key.IGenerator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTesting", address)
	ret0, _ := ret[0].(key.IGenerator)
	return ret0
}

// SetTesting indicates an expected call of SetTesting.
func (mr *MockKeygeneratorMockRecorder) SetTesting(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTesting", reflect.TypeOf((*MockKeygenerator)(nil).SetTesting), address)
}
